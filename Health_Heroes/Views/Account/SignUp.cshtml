@model Health_Heroes.Models.User
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #ffe6e6;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .signup-container {
            max-width: 500px;
            width: 100%;
            padding: 30px;
            background-color: #fff;
            border: 2px solid #ff4d4d;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        }

            .signup-container h1 {
                color: #ff4d4d;
                font-size: 36px;
            }

            .signup-container h3 {
                color: #ff4d4d;
                font-size: 18px;
                margin-bottom: 30px;
            }

        .form-group {
            margin-bottom: 20px;
            position: relative;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                color: #333;
            }

        .form-control {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #f9f9f9;
            color: #333;
        }

        .btn {
            width: 100%;
            padding: 10px;
            background-color: #ff4d4d;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            border-radius: 5px;
        }

            .btn:disabled {
                background-color: #ccc;
            }

        .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
        }

        #password-requirements {
            text-align: left;
            padding-left: 0;
            margin-top: 10px;
        }

            #password-requirements li {
                list-style-type: none;
                font-size: 14px;
                color: red;
            }

                #password-requirements li.valid {
                    color: green;
                }

        .error-message {
            color: red;
            font-size: 14px;
        }
    </style>
</head>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        /* Styles remain unchanged */
    </style>
</head>
<body>
    <div class="signup-container">
        <h1>Welcome to Health Hero</h1>
        <h3>Your Contribution Matters</h3>

        <!-- Form with a POST method -->
        <form id="signupForm" method="post" action="/Account/SignUp">

            <div class="form-group">
                <label for="ssn">SSN (xxx-xx-xxxx):</label>
                <input type="text" id="ssn" name="SSN" class="form-control" required oninput="validateSSN()" />
                <p id="ssn-error" class="error-message"></p>
            </div>

            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="Name" class="form-control" required />
            </div>

            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="Email_Address" class="form-control" required oninput="validateEmail()" />
                <p id="email-error" class="error-message"></p>
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="Password" class="form-control" required oninput="validatePassword()" />
                <span class="toggle-password" onclick="togglePasswordVisibility()">
                    <i class="fas fa-eye" id="eye-icon"></i>
                </span>
                <ul id="password-requirements">
                    <li id="length" class="invalid">At least 8 characters</li>
                    <li id="uppercase" class="invalid">At least one uppercase letter (A-Z)</li>
                    <li id="lowercase" class="invalid">At least one lowercase letter (a-z)</li>
                    <li id="digit" class="invalid">At least one number (0-9)</li>
                    <li id="special" class="invalid">
                        @Html.Raw("At least one special character (!, @, #, %, etc.)")
                    </li>
                </ul>
            </div>

            <button type="submit" id="signup-btn" class="btn" disabled>Sign Up</button>
        </form>
    </div>

    <script>
        function validateSSN() {
            const ssnInput = document.getElementById("ssn");
            const ssnError = document.getElementById("ssn-error");
            const ssnPattern = /^\d{3}-\d{2}-\d{4}$/;

            if (!ssnPattern.test(ssnInput.value)) {
                ssnError.textContent = "Invalid SSN format. Use xxx-xx-xxxx.";
                disableSignupButton();
                return;
            }

            fetch("/Account/CheckSSNExists", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ ssn: ssnInput.value }),
            })
                .then((response) => response.json())
                .then((exists) => {
                    if (exists) {
                        ssnError.textContent = "SSN already exists. Please use a different one.";
                        disableSignupButton();
                    } else {
                        ssnError.textContent = "";
                        enableSignupButton();
                    }
                })
                .catch(() => {
                    ssnError.textContent = "Error checking SSN. Please try again.";
                    disableSignupButton();
                });
        }

        function validateEmail() {
            const emailInput = document.getElementById("email");
            const emailError = document.getElementById("email-error");

            if (!emailInput.validity.valid) {
                emailError.textContent = "Invalid email format.";
                disableSignupButton();
                return;
            }

            fetch("/Account/CheckEmailExists", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email: emailInput.value }),
            })
                .then((response) => response.json())
                .then((exists) => {
                    if (exists) {
                        emailError.textContent = "Email already exists. Please use a different one.";
                        disableSignupButton();
                    } else {
                        emailError.textContent = "";
                        enableSignupButton();
                    }
                })
                .catch(() => {
                    emailError.textContent = "Error checking email. Please try again.";
                    disableSignupButton();
                });
        }

        function validatePassword() {
            const passwordInput = document.getElementById("password");
            const requirements = {
                length: passwordInput.value.length >= 8,
                uppercase: /[A-Z]/.test(passwordInput.value),
                lowercase: /[a-z]/.test(passwordInput.value),
                digit: /\d/.test(passwordInput.value),
                special: /[\W_]/.test(passwordInput.value),
            };

            for (const [id, valid] of Object.entries(requirements)) {
                document.getElementById(id).classList.toggle("valid", valid);
                document.getElementById(id).classList.toggle("invalid", !valid);
            }

            enableSignupButton();
        }

        function enableSignupButton() {
            const ssnError = document.getElementById("ssn-error").textContent === "";
            const emailError = document.getElementById("email-error").textContent === "";
            const passwordValid = document.querySelectorAll("#password-requirements .valid").length === 5;

            document.getElementById("signup-btn").disabled = !(ssnError && emailError && passwordValid);
        }

        function disableSignupButton() {
            document.getElementById("signup-btn").disabled = true;
        }

        function togglePasswordVisibility() {
            const passwordInput = document.getElementById("password");
            const eyeIcon = document.getElementById("eye-icon");
            if (passwordInput.type === "password") {
                passwordInput.type = "text";
                eyeIcon.classList.remove("fa-eye");
                eyeIcon.classList.add("fa-eye-slash");
            } else {
                passwordInput.type = "password";
                eyeIcon.classList.remove("fa-eye-slash");
                eyeIcon.classList.add("fa-eye");
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("ssn").addEventListener("input", validateSSN);
            document.getElementById("email").addEventListener("input", validateEmail);
            document.getElementById("password").addEventListener("input", validatePassword);
        });
    </script>
</body>
</html>
